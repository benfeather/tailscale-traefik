services:
  auth-server:
    image: ghcr.io/goauthentik/server:latest
    container_name: auth-server
    command: server
    restart: unless-stopped
    depends_on:
      auth-postgresql:
        condition: service_healthy
      auth-redis:
        condition: service_healthy
    env_file: ../../.env
    environment:
      AUTHENTIK_POSTGRESQL__HOST: auth-postgresql
      AUTHENTIK_POSTGRESQL__NAME: ${AUTH_DB_NAME:-authentik}
      AUTHENTIK_POSTGRESQL__USER: ${AUTH_DB_USER:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${AUTH_DB_PASS:?database password required}
      AUTHENTIK_REDIS__HOST: auth-redis
      AUTHENTIK_SECRET_KEY: ${AUTH_SECRET_KEY:?secret key required}
    volumes:
      - ${CONF_DIR}/authentik/custom-templates:/templates
      - ${CONF_DIR}/authentik/media:/media
    labels:
      - traefik.enable=true
      - traefik.http.routers.auth.entrypoints=websecure
      - traefik.http.routers.auth.rule=Host(`auth.${DOMAIN}`)
      - traefik.http.routers.auth.tls.certresolver=cloudflare
      - traefik.http.services.auth.loadbalancer.server.port=9000

  auth-worker:
    image: ghcr.io/goauthentik/server:latest
    container_name: auth-worker
    command: worker
    restart: unless-stopped
    user: root
    depends_on:
      auth-postgresql:
        condition: service_healthy
      auth-redis:
        condition: service_healthy
    env_file: ../../.env
    environment:
      AUTHENTIK_POSTGRESQL__HOST: auth-postgresql
      AUTHENTIK_POSTGRESQL__NAME: ${AUTH_DB_NAME:-authentik}
      AUTHENTIK_POSTGRESQL__USER: ${AUTH_DB_USER:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${AUTH_DB_PASS:?database password required}
      AUTHENTIK_REDIS__HOST: auth-redis
      AUTHENTIK_SECRET_KEY: ${AUTH_SECRET_KEY:?secret key required}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${CONF_DIR}/authentik/certs:/certs
      - ${CONF_DIR}/authentik/custom-templates:/templates
      - ${CONF_DIR}/authentik/media:/media

  auth-postgresql:
    image: docker.io/library/postgres:alpine
    container_name: auth-postgresql
    restart: unless-stopped
    env_file: ../../.env
    environment:
      POSTGRES_DB: ${AUTH_DB_NAME:-authentik}
      POSTGRES_USER: ${AUTH_DB_USER:-authentik}
      POSTGRES_PASSWORD: ${AUTH_DB_PASS:?database password required}
    healthcheck:
      interval: 30s
      retries: 5
      start_period: 20s
      test:
        - CMD-SHELL
        - pg_isready -d authentik -U authentik
      timeout: 5s
    volumes:
      - ${CONF_DIR}/authentik/db:/var/lib/postgresql/data
    
  auth-redis:
    image: docker.io/library/redis:alpine
    container_name: auth-redis
    restart: unless-stopped
    command: --save 60 1 --loglevel warning
    healthcheck:
      interval: 30s
      retries: 5
      start_period: 20s
      test:
        - CMD-SHELL
        - redis-cli ping | grep PONG
      timeout: 3s
    volumes:
      - redis:/data

volumes:
  redis:
    driver: local
